Design: https://www.figma.com/file/oCjwjn4o8zVzkfgBAvnZh3/MOCU-v0.2.19?type=design&node-id=64%3A912&mode=design&t=wQd8Bo4S3TgrqS2r-1

Stackoverflow question: https://stackoverflow.com/questions/77362922/how-to-prevent-mirroring-of-vr-camera-view-to-main-monitor

Unity documentation: https://docs.unity3d.com/Manual/index.html

Cedrus documentation: https://www.cedrus.com/support/rb_series/index.htm
Cedrus GIT: https://github.com/cedrus-opensource


Notes:
- ABOUT GENERAL:
	- Edit/ProjectSettings/ScriptExecutionOrder for managing scripts execution order
	(important, for example, to run config manager earlier than dependent on him scripts)
	- About FPS: VR platforms ignore both QualitySettings.vSyncCount and Application.targetFrameRate. Instead, the VR SDK controls the frame rate
	(which means you can control app fps but not while VR is active)
	- sometimes Unity just F*CKING IGNORS EXCEPTIONS and continues its execution without any console notification (try catch DO help)
	- interposes communication is now done via NamedPipes. If higher speed will be needed - switch to SharedMemory (faster but more complicated).
	- removed 'exe' files from GitHub (too heavy). When downloading repo you will need to compile them by yourself and add to folder 'Daemons'
- ABOUT EXTERNAL APPLICATIONS (audio and port finder):
	- do not specify that the project is for Windows, otherwise the file size will increase from 64mb to 150mb
	- project settings should be something like:
		- <OutputType>Exe</OutputType>
		- <TargetFramework>net7.0</TargetFramework>
		- <LangVersion>10.0</LangVersion>
		- <ImplicitUsings>enable</ImplicitUsings>
		- <Nullable>enable</Nullable>
		- <Optimize>true</Optimize>
		- <DebugType>none</DebugType>    <!-- To prevent the generation of a debug file in the publish folder -->
		- <RuntimeIdentifier>win-x64</RuntimeIdentifier>
		- <PublishSingleFile>true</PublishSingleFile>
		- <SelfContained>true</SelfContained>
		- <IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
- ABOUT XBOX CONTROLLER:
	- may work in 2 modes -- wireless and via cable
	- wireless: make sure batteries are full; press center (round) btn (it should blick slowly); hold "net" btn from behind (now center btn should blink frequently);
	connect bluetooth adapter to PC; from windows settings connect controller (first option). Goes off after some time of nothing-doing
	- via cable: doesn't need batteries and never goes off
- ABOUT SOUND:
	- it is possible to do without writing a daemon, but then only one audio receiver can exist at the same time (native in unity)
	- in Oculus App tap on device -> audio and mic should use Windows settings, not itself
	- it turned out that the device IDs can change (and that's what the code is tied to). so if something doesn't work, double-check the ID
	- sound delay:
		- intercom researcher to participant -- 172ms
		- intercom participant to researcher -- 165ms
		- play single Console.Beep() 	     -- 110ms
- ABOUT CEDRUS:
	- needs System.IO.Ports, which needs .Net Framework (not .net Standard 2.1)
- ABOUT DISPLAYS:
	- in Unity Editor there is always only 1 display. Real number can be get only in build version
- ABOUT FIFINE MICROPHONE:
	- better sound with "B" symbol -- bidirectional
	- also make sure it is not muted (touch button on itself on the top. green - works, red - muted)
